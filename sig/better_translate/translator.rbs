module BetterTranslate
  # Main translator class
  #
  # Coordinates the translation process using configuration, providers,
  # strategies, and YAML handling.
  class Translator
    type translation_results = { success_count: Integer, failure_count: Integer, errors: Array[Hash[Symbol, untyped]] }

    @config: Configuration
    @provider: Providers::BaseHttpProvider
    @yaml_handler: YAMLHandler
    @progress_tracker: ProgressTracker
    @input_files: Array[String]

    attr_reader config: Configuration

    def initialize: (Configuration config) -> void

    def translate_all: () -> translation_results

    private

    def resolve_input_files: () -> Array[String]

    def translate_parallel: (Hash[String, untyped] source_strings, (YAMLHandler | JsonHandler) handler) -> translation_results

    def translate_sequential: (Hash[String, untyped] source_strings, (YAMLHandler | JsonHandler) handler) -> translation_results

    def translate_language: (Hash[String, untyped] source_strings, Hash[Symbol, String] lang, (YAMLHandler | JsonHandler) handler) -> void

    def record_error: (translation_results results, Hash[Symbol, String] lang, Exception error) -> void

    def build_output_path_for_file: (String input_file, String target_lang_code) -> String
  end
end
